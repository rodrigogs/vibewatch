name: Release Please

on:
  push:
    branches:
      - master

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          release-type: rust
          # Use PAT to trigger CI workflows on created PRs
          token: ${{ secrets.RELEASE_PLEASE_TOKEN }}

  publish-crate:
    name: Publish to crates.io
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_TOKEN }}
        continue-on-error: true

  build-binaries:
    name: Build and Upload Binaries
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux binaries (x86_64 and aarch64) - uses cross for aarch64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          # macOS binaries (Intel and Apple Silicon)
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          # Windows binary
          - target: x86_64-pc-windows-msvc
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross (for Linux ARM cross-compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build and upload binary
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: vibewatch
          target: ${{ matrix.target }}
          tar: unix
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: refs/tags/${{ needs.release-please.outputs.tag_name }}
